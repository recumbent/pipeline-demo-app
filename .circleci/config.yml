version: 2.1

orbs:
  slack: circleci/slack@3.4.1
  aws-cli: circleci/aws-cli@0.1.19
  node: circleci/node@1.1.6

executors:
  build:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:2.1

  integration:
    docker:
      - image: circleci/python:3.7

  aws:
    docker:
      - image: circleci/python:3.7 

jobs:
  build:
    executor: build
    steps:
      - checkout

      - run:
          name: install aws lambda tools
          command: |
            apt-get update
            apt-get install zip -y
            dotnet tool install -g Amazon.Lambda.Tools

      - run:
          name: Install packages
          command: dotnet restore

      - run:
          name: build
          command: dotnet build

      - run:
          name: Run tests
          command: dotnet test

      - run:
          name: package app
          command: |
            export PATH="$PATH:/root/.dotnet/tools"
            dotnet lambda package --project-location ./src/pipeline-demo-app/ -o ./publish/lambda.zip

      - persist_to_workspace:
          root: .
          paths:
            - publish/*
            - scripts/*
            - infrastructure/*

  integration_test:
    executor: build
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: .
      - run:
          name: Container npm login and install packages
          command: |
            echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN_READONLY}" > ~/.npmrc
            cd ./integration && npm install
      - run:
          name: run ci integration script
          command: |
            ./scripts/ci_run_integration_tests.sh
      - store_artifacts:
          path: mochawesome-report
          destination: report
      - store_artifacts:
          path: failed-approvals
      - store_test_results:
          path: test-results
      - persist_to_workspace:
          root: .
          paths:
            - publish/*
            - scripts/*
            - infrastructure/*

  publish:
    executor: 
        name: aws-cli/default
        python-version: '3.7'

    environment:
        AWS_DEFAULT_REGION: eu-west-2

    steps:
      - attach_workspace:
          at: .
  
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY

      - run:
          name: Publish lambda to S3
          command: |
            bash ./scripts/publish.sh
        
      - persist_to_workspace:
          root: .
          paths:
            - scripts/*
            - infrastructure/*

  promote:
    executor: 
      name: aws-cli/default
      python-version: '3.7'

    environment:
      AWS_DEFAULT_REGION: eu-west-2

    parameters:
      fromenvironment:
        type: enum
        enum: ["dev", "test"]
      toenvironment:
        type: enum
        enum: ["test","prod"]
    
    steps:
      - attach_workspace:
          at: .
      
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY

      - run:
          name: Promote lambda to new environment
          command: |
            bash ./scripts/promote.sh -s <<parameters.fromenvironment>> -e <<parameters.toenvironment>>

      - persist_to_workspace:
          root: .
          paths:
            - scripts/*
            - infrastructure/*

workflows:
  version: 2
  demo-pipeline:
    jobs:
      - build:
          context: aws-build

      - publish:
          context: aws-publish
          requires:
            - build
          # - integration_test
          filters:
            branches:
              only: master

      - quality-gate: # <<< A job that will require manual approval in the CircleCI web application.
          type: approval # <<< This key-value pair will set your workflow to a status of "On Hold"
          requires: # We only run the "hold" job when publish has succeeded
            - publish
          
          filters:
            branches:
              only: master

      - promote:
          context: aws-publish # Should be promote context
          requires:
            - quality-gate
          filters:
            branches:
              only: master  

